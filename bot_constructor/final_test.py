#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç BotCraft
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""
import sys
import os
from pathlib import Path

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    from dotenv import load_dotenv
    load_dotenv("touch.env")
    
    required_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY", "WEBAPP_URL"]
    for var in required_vars:
        value = os.getenv(var)
        if value and value != f"your_{var.lower()}_here":
            print(f"‚úÖ {var}: OK")
        else:
            print(f"‚ùå {var}: MISSING")
            return False
    return True

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app import db
        con = db()
        cur = con.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cur.fetchall()]
        expected_tables = ['owners', 'documents', 'chunks', 'catalog_items']
        
        for table in expected_tables:
            if table in tables:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: OK")
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: MISSING")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        cur.execute("PRAGMA integrity_check")
        result = cur.fetchone()
        if result and result[0] == "ok":
            print("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: OK")
        else:
            print("‚ùå –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: ERROR")
            return False
        
        con.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_rag_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä—è—é RAG —Å–∏—Å—Ç–µ–º—É...")
    
    try:
        from rag import db_init_rag, upload_doc, retrieve_top_k
        db_init_rag()
        print("‚úÖ RAG –ë–î: OK")
        print("‚úÖ RAG —Ñ—É–Ω–∫—Ü–∏–∏: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RAG: {e}")
        return False

def test_fastapi():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—è—é FastAPI...")
    
    try:
        from app import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes = [route.path for route in app.routes]
        expected_routes = ['/health', '/api/verify', '/api/save_basics']
        
        for route in expected_routes:
            if route in routes:
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {route}: OK")
            else:
                print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç {route}: MISSING")
                return False
        
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ FastAPI: {e}")
        return False

def test_telegram_bot():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä—è—é Telegram –±–æ—Ç–∞...")
    
    try:
        from main import start_cmd, panel_cmd, ask_cmd, main
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        functions = [start_cmd, panel_cmd, ask_cmd]
        for func in functions:
            if callable(func):
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func.__name__}: OK")
            else:
                print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {func.__name__}: ERROR")
                return False
        
        print("‚úÖ Telegram –±–æ—Ç: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")
        return False

def test_webapp():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebApp"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä—è—é WebApp...")
    
    try:
        webapp_path = Path("webapp/index.html")
        if webapp_path.exists():
            content = webapp_path.read_text(encoding='utf-8')
            if len(content) > 1000:
                print("‚úÖ WebApp HTML: OK")
                return True
            else:
                print("‚ùå WebApp HTML: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
        else:
            print("‚ùå WebApp HTML: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebApp: {e}")
        return False

def main():
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ BOTCRAFT\n")
    print("=" * 50)
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("RAG —Å–∏—Å—Ç–µ–º–∞", test_rag_system),
        ("FastAPI", test_fastapi),
        ("Telegram –±–æ—Ç", test_telegram_bot),
        ("WebApp", test_webapp),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("source venv/bin/activate")
        print("python run_dev.py")
        return 0
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
