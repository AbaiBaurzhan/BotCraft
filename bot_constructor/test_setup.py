#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BotCraft
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""
import sys
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå FastAPI: {e}")
        return False
    
    try:
        import telegram
        print("‚úÖ python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå python-telegram-bot: {e}")
        return False
    
    try:
        import openai
        print("‚úÖ OpenAI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå OpenAI: {e}")
        return False
    
    try:
        import fitz
        print("‚úÖ PyMuPDF –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå PyMuPDF: {e}")
        return False
    
    try:
        import docx
        print("‚úÖ python-docx –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå python-docx: {e}")
        return False
    
    try:
        import openpyxl
        print("‚úÖ openpyxl –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå openpyxl: {e}")
        return False
    
    try:
        import numpy
        print("‚úÖ NumPy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå NumPy: {e}")
        return False
    
    return True

def test_local_modules():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏...")
    
    try:
        from app import app
        print("‚úÖ app.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå app.py: {e}")
        return False
    
    try:
        from main import main
        print("‚úÖ main.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå main.py: {e}")
        return False
    
    try:
        from rag import db_init_rag
        print("‚úÖ rag.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå rag.py: {e}")
        return False
    
    return True

def test_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    env_file = Path("touch.env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª touch.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ touch.env —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏:")
        print("TELEGRAM_TOKEN=your_bot_token")
        print("OPENAI_API_KEY=your_openai_key")
        return False
    
    print("‚úÖ touch.env –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content = env_file.read_text()
    if "your_telegram_bot_token_here" in content:
        print("‚ö†Ô∏è  –ó–∞–º–µ–Ω–∏—Ç–µ placeholder'—ã –≤ touch.env –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏")
        return False
    
    print("‚úÖ –ö–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    return True

def main():
    print("üöÄ –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BotCraft\n")
    
    success = True
    
    if not test_imports():
        success = False
    
    if not test_local_modules():
        success = False
    
    if not test_env_file():
        success = False
    
    print("\n" + "="*50)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python run_dev.py")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
