#!/usr/bin/env python3
"""
Cloud Run Entry Point for SelinaAI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ª–æ–∫–∞–ª—å–Ω—ã–π (polling) –∏–ª–∏ –æ–±–ª–∞—á–Ω—ã–π (webhook)
"""

import os
import asyncio
import uvicorn
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("bot_constructor/touch.env") or load_dotenv("touch.env")

def is_cloud_environment():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ –æ–±–ª–∞–∫–µ"""
    return (
        os.getenv("K_SERVICE") is not None or  # Google Cloud Run
        os.getenv("PORT") is not None or        # Cloud Run –ø–æ—Ä—Ç
        os.getenv("CLOUD_RUN") == "true"       # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥
    )

def get_server_config():
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if is_cloud_environment():
        print("‚òÅÔ∏è –ó–∞–ø—É—Å–∫ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (webhook)")
        return {
            "host": "0.0.0.0",
            "port": int(os.getenv("PORT", 8080)),
            "webhook_mode": True
        }
    else:
        print("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")
        return {
            "host": "127.0.0.1",
            "port": 8000,
            "webhook_mode": False
        }

async def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    config = get_server_config()
    
    if config["webhook_mode"]:
        # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook —Ä–µ–∂–∏–º
        os.environ["TELEGRAM_WEBHOOK_MODE"] = "true"
        print("üîß Webhook —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è webhook
        required_vars = [
            "TELEGRAM_TOKEN",
            "OPENAI_API_KEY",
            "WEBAPP_URL"
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ Google Cloud Run")
            return False
        
        print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling —Ä–µ–∂–∏–º
        os.environ["TELEGRAM_WEBHOOK_MODE"] = "false"
        print("üîß Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ SelinaAI Multi-Channel API")
    print("=" * 40)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not asyncio.run(setup_environment()):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
    config = get_server_config()
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {config['host']}:{config['port']}")
    print(f"üîß –†–µ–∂–∏–º: {'Webhook' if config['webhook_mode'] else 'Polling'}")
    
    if config["webhook_mode"]:
        print("üì± Webhook endpoints:")
        print(f"   ‚Ä¢ Telegram: {os.getenv('WEBAPP_URL', 'N/A')}/webhook/telegram")
        print(f"   ‚Ä¢ WhatsApp: {os.getenv('WEBAPP_URL', 'N/A')}/webhook/whatsapp")
        print(f"   ‚Ä¢ Instagram: {os.getenv('WEBAPP_URL', 'N/A')}/webhook/instagram")
    else:
        print("üì± –õ–æ–∫–∞–ª—å–Ω—ã–µ endpoints:")
        print(f"   ‚Ä¢ API: http://127.0.0.1:8000")
        print(f"   ‚Ä¢ Docs: http://127.0.0.1:8000/docs")
        print(f"   ‚Ä¢ WebApp: http://127.0.0.1:8000/webapp")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        "bot_constructor.app:app",
        host=config["host"],
        port=config["port"],
        log_level="info"
    )

if __name__ == "__main__":
    main()
