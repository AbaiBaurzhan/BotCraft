#!/usr/bin/env python3
"""
SelinaAI Multi-Channel Development Runner
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import asyncio
import subprocess
import signal
import time
from pathlib import Path

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    env_file = Path("touch.env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª touch.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª touch.env –Ω–∞ –æ—Å–Ω–æ–≤–µ touch.env.example")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    with open(env_file, 'r') as f:
        content = f.read()
        required_vars = ["TELEGRAM_TOKEN", "OPENAI_API_KEY"]
        missing_vars = [var for var in required_vars if var not in content or "your_" in content]
        
        if missing_vars:
            print(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ touch.env –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {', '.join(missing_vars)}")
            print("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
    
    print("‚úÖ –§–∞–π–ª touch.env –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True

def start_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üì° –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://127.0.0.1:8000")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    cmd = [
        sys.executable, "-m", "uvicorn", 
        "app:app", 
        "--host", "127.0.0.1", 
        "--port", "8000", 
        "--reload"
    ]
    
    try:
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI: {e}")
        return None

def start_ngrok():
    """–ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è"""
    print("üåê –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ ngrok
        result = subprocess.run(["pgrep", "-f", "ngrok"], capture_output=True)
        if result.returncode == 0:
            print("‚úÖ ngrok —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
        process = subprocess.Popen(
            ["ngrok", "http", "8000"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ ngrok —Ç—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok")
            return None
            
    except FileNotFoundError:
        print("‚ö†Ô∏è ngrok –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install ngrok")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
        return None

def get_ngrok_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL ngrok —Ç—É–Ω–Ω–µ–ª—è"""
    try:
        import requests
        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            data = response.json()
            tunnels = data.get("tunnels", [])
            if tunnels:
                return tunnels[0]["public_url"]
    except:
        pass
    return None

def update_env_with_ngrok(ngrok_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å ngrok URL"""
    if not ngrok_url:
        return
    
    env_file = Path("touch.env")
    if env_file.exists():
        content = env_file.read_text()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º WEBAPP_URL
        if "WEBAPP_URL=" in content:
            content = content.replace(
                "WEBAPP_URL=https://127.0.0.1:8000",
                f"WEBAPP_URL={ngrok_url}"
            )
            content = content.replace(
                "WEBAPP_URL=http://127.0.0.1:8000",
                f"WEBAPP_URL={ngrok_url}"
            )
            
            # –ï—Å–ª–∏ WEBAPP_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º
            if "WEBAPP_URL=" not in content:
                content += f"\nWEBAPP_URL={ngrok_url}\n"
        
        env_file.write_text(content)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω WEBAPP_URL: {ngrok_url}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ SelinaAI Multi-Channel –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not check_env_file():
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    ngrok_process = start_ngrok()
    
    # –ñ–¥–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º URL
    if ngrok_process:
        time.sleep(5)
        ngrok_url = get_ngrok_url()
        if ngrok_url:
            print(f"üåê Ngrok URL: {ngrok_url}")
            update_env_with_ngrok(ngrok_url)
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    fastapi_process = start_fastapi()
    if not fastapi_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä")
        if ngrok_process:
            ngrok_process.terminate()
        return
    
    print("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("üåê WebApp: http://127.0.0.1:8000")
    if ngrok_url:
        print(f"üåê HTTPS: {ngrok_url}")
    print("üì± –ö–∞–Ω–∞–ª—ã: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ /channels/status")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        fastapi_process.wait()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        if fastapi_process:
            fastapi_process.terminate()
            fastapi_process.wait()
        
        if ngrok_process:
            ngrok_process.terminate()
            ngrok_process.wait()
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()
