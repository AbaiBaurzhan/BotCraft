# app.py - SelinaAI Multi-Channel API
from __future__ import annotations
import os
import json
from pathlib import Path
from typing import Dict, Any, Optional, List

from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Request, UploadFile, File, Form, Depends, Response
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from database import db, User, AIAgent, Document
from auth import auth_manager, get_current_user, get_optional_user
from agents import get_agent_manager
from channels.manager import ChannelManager
from channels.base import Message, Response as ChannelResponse, MessageType

# ---------- ENV ----------
load_dotenv("touch.env") or load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

ROOT = Path(__file__).parent
WEB_DIR = ROOT / "webapp"
UPLOADS_DIR = ROOT / "uploads"
WEB_DIR.mkdir(exist_ok=True)
UPLOADS_DIR.mkdir(exist_ok=True)

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ ----------
CHANNELS_CONFIG = {
    "webhook_base_url": os.getenv("WEBAPP_URL", "https://127.0.0.1:8000"),
    "telegram": {
        "token": os.getenv("TELEGRAM_TOKEN"),
        "webhook_url": os.getenv("WEBAPP_URL", "https://127.0.0.1:8000"),
        "webhook_mode": os.getenv("TELEGRAM_WEBHOOK_MODE", "false").lower() == "true"
    },
    "whatsapp": {
        "access_token": os.getenv("WHATSAPP_ACCESS_TOKEN"),
        "phone_number_id": os.getenv("WHATSAPP_PHONE_NUMBER_ID"),
        "verify_token": os.getenv("WHATSAPP_VERIFY_TOKEN"),
        "app_secret": os.getenv("WHATSAPP_APP_SECRET")
    },
    "instagram": {
        "access_token": os.getenv("INSTAGRAM_ACCESS_TOKEN"),
        "instagram_business_account_id": os.getenv("INSTAGRAM_BUSINESS_ACCOUNT_ID"),
        "page_id": os.getenv("INSTAGRAM_PAGE_ID"),
        "verify_token": os.getenv("INSTAGRAM_VERIFY_TOKEN")
    }
}

# ---------- App ----------
app = FastAPI(
    title="SelinaAI Multi-Channel API",
    description="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram, WhatsApp –∏ Instagram",
    version="2.0.0"
)

app.add_middleware(
    CORSMiddleware, 
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"], 
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
channel_manager = ChannelManager(CHANNELS_CONFIG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤
agent_manager = get_agent_manager(channel_manager)

# ---------- Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ ----------
def get_agent_manager_dep() -> Any:
    return agent_manager

# ---------- –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ----------
@app.get("/health")
async def health(): 
    return {"ok": True, "service": "SelinaAI Multi-Channel API", "version": "2.0.0"}

@app.get("/healthz")
async def healthz(): 
    """Health check endpoint for Google Cloud Run"""
    return {"status": "healthy", "service": "SelinaAI", "version": "2.0.0"}

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>SelinaAI API</title>
        <meta charset="utf-8">
    </head>
    <body>
        <h1>üöÄ SelinaAI Multi-Channel API</h1>
        <p>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤</p>
        <p><a href="/docs">üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></p>
        <p><a href="/webapp">üåê WebApp –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</a></p>
    </body>
    </html>
    """)

# ---------- API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ----------
@app.post("/api/auth/telegram")
async def auth_telegram(request: Request):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp"""
    try:
        body = await request.json()
        init_data = body.get("initData")
        
        if not init_data:
            raise HTTPException(status_code=400, detail="initData required")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth_manager.authenticate_telegram_user(init_data)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_token = auth_manager.create_session(user)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        access_token = auth_manager.create_access_token(user)
        
        return {
            "ok": True,
            "user": {
                "id": user.id,
                "telegram_id": user.telegram_id,
                "email": user.email,
                "created_at": user.created_at.isoformat()
            },
            "session_token": session_token,
            "access_token": access_token
        }
        
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.post("/api/auth/email")
async def auth_email(request: Request):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é"""
    try:
        body = await request.json()
        email = body.get("email")
        password = body.get("password")
        
        if not email or not password:
            raise HTTPException(status_code=400, detail="Email and password required")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = auth_manager.authenticate_email_user(email, password)
        
        if not user:
            raise HTTPException(status_code=401, detail="Invalid credentials")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_token = auth_manager.create_session(user)
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        access_token = auth_manager.create_access_token(user)
        
        return {
            "ok": True,
            "user": {
                "id": user.id,
                "telegram_id": user.telegram_id,
                "email": user.email,
                "created_at": user.created_at.isoformat()
            },
            "session_token": session_token,
            "access_token": access_token
        }
        
    except Exception as e:
        raise HTTPException(status_code=401, detail=str(e))

@app.post("/api/auth/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –∏–∑ cookie
        session_token = request.cookies.get("session_token")
        
        if session_token:
            auth_manager.logout(session_token)
        
        response = JSONResponse({"ok": True, "message": "Logged out successfully"})
        response.delete_cookie("session_token")
        return response
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏ ----------
@app.get("/api/agents")
async def get_agents(user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        agents = agent_manager.get_user_agents(user)
        return {
            "ok": True,
            "agents": [
                {
                    "id": agent.id,
                    "name": agent.name,
                    "business_description": agent.business_description,
                    "capabilities": agent.capabilities,
                    "tone": agent.tone,
                    "system_prompt": agent.system_prompt,
                    "integrations": json.loads(agent.integrations) if agent.integrations else {},
                    "created_at": agent.created_at.isoformat(),
                    "is_active": agent.is_active
                }
                for agent in agents
            ]
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/agents")
async def create_agent(
    request: Request,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
    try:
        body = await request.json()
        name = body.get("name")
        business_description = body.get("business_description")
        capabilities = body.get("capabilities")
        tone = body.get("tone", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")
        
        if not all([name, business_description, capabilities]):
            raise HTTPException(status_code=400, detail="Name, business_description and capabilities required")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = agent_manager_dep.create_agent(
            user=user,
            name=name,
            business_description=business_description,
            capabilities=capabilities,
            tone=tone
        )
        
        return {
            "ok": True,
            "agent": {
                "id": agent.id,
                "name": agent.name,
                "business_description": agent.business_description,
                "capabilities": agent.capabilities,
                "tone": agent.tone,
                "created_at": agent.created_at.isoformat()
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/agents/{agent_id}")
async def get_agent(
    agent_id: int,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    try:
        agent = agent_manager_dep.get_agent(user, agent_id)
        
        return {
            "ok": True,
            "agent": {
                "id": agent.id,
                "name": agent.name,
                "business_description": agent.business_description,
                "capabilities": agent.capabilities,
                "tone": agent.tone,
                "system_prompt": agent.system_prompt,
                "integrations": agent.integrations,
                "created_at": agent.created_at.isoformat(),
                "is_active": agent.is_active
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/agents/{agent_id}")
async def update_agent(
    agent_id: int,
    request: Request,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
    try:
        body = await request.json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        updated_agent = agent_manager_dep.update_agent(user, agent_id, **body)
        
        return {
            "ok": True,
            "agent": {
                "id": updated_agent.id,
                "name": updated_agent.name,
                "business_description": updated_agent.business_description,
                "capabilities": updated_agent.capabilities,
                "tone": updated_agent.tone,
                "system_prompt": updated_agent.system_prompt,
                "integrations": json.loads(updated_agent.integrations) if updated_agent.integrations else {},
                "updated_at": updated_agent.created_at.isoformat()
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/agents/{agent_id}")
async def delete_agent(
    agent_id: int,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
    try:
        success = agent_manager_dep.delete_agent(user, agent_id)
        
        if success:
            return {"ok": True, "message": "Agent deleted successfully"}
        else:
            raise HTTPException(status_code=500, detail="Failed to delete agent")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ ----------
@app.post("/api/agents/{agent_id}/generate_prompt")
async def generate_prompt(
    agent_id: int,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = agent_manager_dep.get_agent(user, agent_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = agent_manager_dep.generate_system_prompt(agent)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        updated_agent = agent_manager_dep.update_agent_prompt(user, agent_id, prompt)
        
        return {
            "ok": True,
            "prompt": prompt,
            "agent_id": agent_id
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π ----------
@app.put("/api/agents/{agent_id}/integrations")
async def update_integrations(
    agent_id: int,
    request: Request,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
    try:
        body = await request.json()
        integrations = body.get("integrations", {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        updated_agent = agent_manager_dep.update_agent_integrations(user, agent_id, integrations)
        
        return {
            "ok": True,
            "integrations": updated_agent.integrations,
            "agent_id": agent_id
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ----------
@app.post("/api/agents/{agent_id}/documents")
async def upload_document(
    agent_id: int,
    file: UploadFile = File(...),
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = agent_manager_dep.upload_document(user, agent_id, file)
        
        return {
            "ok": True,
            "document": {
                "id": document.id,
                "filename": document.filename,
                "file_type": document.file_type,
                "uploaded_at": document.uploaded_at.isoformat()
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/agents/{agent_id}/documents")
async def get_agent_documents(
    agent_id: int,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
    try:
        documents = agent_manager_dep.get_agent_documents(user, agent_id)
        
        return {
            "ok": True,
            "documents": [
                {
                    "id": doc.id,
                    "filename": doc.filename,
                    "file_type": doc.file_type,
                    "uploaded_at": doc.uploaded_at.isoformat(),
                    "is_processed": doc.is_processed
                }
                for doc in documents
            ]
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ ----------
@app.get("/api/agents/{agent_id}/test_channels")
async def test_agent_channels(
    agent_id: int,
    user: User = Depends(get_current_user),
    agent_manager_dep: Any = Depends(get_agent_manager_dep)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
    try:
        results = agent_manager_dep.test_agent_channels(user, agent_id)
        return {"ok": True, **results}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ ----------
@app.get("/channels/status")
async def get_channels_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    return {
        "ok": True,
        "channels": channel_manager.get_all_channels_status(),
        "active_channels": channel_manager.get_active_channels()
    }

@app.post("/channels/start")
async def start_channels():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    success = await channel_manager.start_all_channels()
    return {
        "ok": success,
        "message": "–ö–∞–Ω–∞–ª—ã –∑–∞–ø—É—â–µ–Ω—ã" if success else "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"
    }

@app.post("/channels/stop")
async def stop_channels():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    success = await channel_manager.stop_all_channels()
    return {
        "ok": success,
        "message": "–ö–∞–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" if success else "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"
    }

# ---------- Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ ----------
@app.get("/webhook/telegram")
async def telegram_webhook_verify(request: Request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook Telegram"""
    params = dict(request.query_params)
    if await channel_manager.verify_webhook("telegram", params):
        return JSONResponse(content=params.get("hub.challenge", ""))
    else:
        raise HTTPException(status_code=400, detail="Webhook verification failed")

@app.post("/webhook/telegram")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook Telegram"""
    try:
        data = await request.json()
        response = await channel_manager.process_message("telegram", data)
        return {"ok": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/webhook/whatsapp")
async def whatsapp_webhook_verify(request: Request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook WhatsApp"""
    params = dict(request.query_params)
    if await channel_manager.verify_webhook("whatsapp", params):
        return JSONResponse(content=params.get("hub.challenge", ""))
    else:
        raise HTTPException(status_code=400, detail="Webhook verification failed")

@app.post("/webhook/whatsapp")
async def whatsapp_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook WhatsApp"""
    try:
        data = await request.json()
        response = await channel_manager.process_message("whatsapp", data)
        return {"ok": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/webhook/instagram")
async def instagram_webhook_verify(request: Request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook Instagram"""
    params = dict(request.query_params)
    if await channel_manager.verify_webhook("instagram", params):
        return JSONResponse(content=params.get("hub.challenge", ""))
    else:
        raise HTTPException(status_code=400, detail="Webhook verification failed")

@app.post("/webhook/instagram")
async def instagram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook Instagram"""
    try:
        data = await request.json()
        response = await channel_manager.process_message("instagram", data)
        return {"ok": True}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@app.post("/api/send_message")
async def send_message(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
    try:
        data = await request.json()
        channel = data.get("channel")
        chat_id = data.get("chat_id")
        content = data.get("content")
        
        if not all([channel, chat_id, content]):
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        response = ChannelResponse(
            chat_id=chat_id,
            content=content,
            message_type=MessageType.TEXT
        )
        
        success = await channel_manager.send_message(channel, response)
        return {"ok": success, "channel": channel}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/send_message_all")
async def send_message_all_channels(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    try:
        data = await request.json()
        chat_id = data.get("chat_id")
        content = data.get("content")
        
        if not all([chat_id, content]):
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        response = ChannelResponse(
            chat_id=chat_id,
            content=content,
            message_type=MessageType.TEXT
        )
        
        results = await channel_manager.send_message_all_channels(response)
        return {"ok": True, "results": results}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------- –°—Ç–∞—Ç–∏–∫–∞ (WebApp) ----------
app.mount("/webapp", StaticFiles(directory=str(WEB_DIR), html=True), name="webapp")

# ---------- Startup –∏ Shutdown —Å–æ–±—ã—Ç–∏—è ----------
@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        await channel_manager.start_all_channels()
        print("üöÄ SelinaAI Multi-Channel API v2.0 –∑–∞–ø—É—â–µ–Ω")
        print("üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞: Telegram, WhatsApp, Instagram")
        print("üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∞–∫—Ç–∏–≤–Ω–∞")
        print("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏: –≥–æ—Ç–æ–≤–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ FastAPI"""
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        await channel_manager.stop_all_channels()
        print("üõë SelinaAI Multi-Channel API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
