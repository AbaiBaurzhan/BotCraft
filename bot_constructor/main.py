# main.py
from __future__ import annotations
import os
from dotenv import load_dotenv
from openai import OpenAI

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
)
from rag import upload_doc, configure_key_resolver

load_dotenv("touch.env") or load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBAPP_URL     = os.getenv("WEBAPP_URL", "https://df98ea55d1c4.ngrok-free.app")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ touch.env")

def system_prompt_from_env() -> str:
    # –ù–∞ —ç—Ç–∞–ø–µ MVP —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ—Ä—ë–º –∏–∑ –±–∞–∑—ã –≤–µ–±‚Äë–ø–∞–Ω–µ–ª–∏ (API) ‚Äî –∑–¥–µ—Å—å –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:
    return os.getenv("FALLBACK_SYSTEM_PROMPT", "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ WebApp –∫–Ω–æ–ø–∫–∏
    if WEBAPP_URL.startswith("https://127.0.0.1"):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n\n"
            "üåê **WebApp –ø–∞–Ω–µ–ª—å**: https://127.0.0.1:8000\n\n"
            "üì± **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**:\n"
            "/panel - –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å\n"
            "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "/upload - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
        )
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîß –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ò–ò‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—ã–π –º–∞—Å—Ç–µ—Ä.",
            reply_markup=kb
        )

async def panel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if WEBAPP_URL.startswith("https://127.0.0.1"):
        await update.message.reply_text(
            "üåê **WebApp –ø–∞–Ω–µ–ª—å**: https://127.0.0.1:8000\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        )
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîß –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
        await update.message.reply_text("–û—Ç–∫—Ä–æ–π –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.", reply_markup=kb)

async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ."""
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask –≤–∞—à –≤–æ–ø—Ä–æ—Å")
    question = " ".join(context.args)

    key = OPENAI_KEY
    if not key:
        return await update.message.reply_text("–ù–µ—Ç OPENAI_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
    client = OpenAI(api_key=key)

    await update.message.chat.send_action(ChatAction.TYPING)
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt_from_env()},
                {"role": "user", "content": question},
            ],
            temperature=0.4,
        )
        answer = resp.choices[0].message.content
        await update.message.reply_text(f"ü§ñ {answer}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

async def fallback_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_cmd(update, context)

def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –∫–ª—é—á–µ–π –¥–ª—è RAG
    configure_key_resolver(lambda: OPENAI_KEY)
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("panel", panel_cmd))
    app.add_handler(CommandHandler("ask", ask_cmd))
    app.add_handler(CommandHandler("upload", upload_doc))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback_text))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
