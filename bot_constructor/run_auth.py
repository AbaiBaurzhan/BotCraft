#!/usr/bin/env python3
"""
SelinaAI Multi-Channel API Runner with Authentication
–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""

import os
import sys
import time
import subprocess
import signal
from pathlib import Path
from dotenv import load_dotenv

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = Path("touch.env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª touch.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª touch.env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    load_dotenv("touch.env")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "TELEGRAM_TOKEN",
        "OPENAI_API_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var) or os.getenv(var).startswith("your_"):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ touch.env –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {', '.join(missing_vars)}")
        print("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print("‚úÖ –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω")
    return True

def start_ngrok():
    """–ó–∞–ø—É—Å–∫ ngrok –¥–ª—è HTTPS"""
    print("üåê –ó–∞–ø—É—Å–∫ ngrok...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ ngrok
    try:
        result = subprocess.run(["pgrep", "ngrok"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ ngrok —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
    except:
        pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    try:
        subprocess.Popen(
            ["ngrok", "http", "8000"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        time.sleep(3)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        print("‚úÖ ngrok –∑–∞–ø—É—â–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
        return False

def get_ngrok_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL ngrok"""
    try:
        import requests
        response = requests.get("http://127.0.0.1:4040/api/tunnels")
        data = response.json()
        
        for tunnel in data.get("tunnels", []):
            if tunnel["proto"] == "https":
                return tunnel["public_url"]
        
        return None
    except:
        return None

def update_env_with_ngrok(ngrok_url):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ touch.env —Å ngrok URL"""
    if not ngrok_url:
        return False
    
    try:
        env_file = Path("touch.env")
        content = env_file.read_text()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º WEBAPP_URL
        if "WEBAPP_URL=" in content:
            content = content.replace(
                "WEBAPP_URL=https://127.0.0.1:8000",
                f"WEBAPP_URL={ngrok_url}"
            )
        else:
            content += f"\nWEBAPP_URL={ngrok_url}\n"
        
        env_file.write_text(content)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω WEBAPP_URL: {ngrok_url}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è touch.env: {e}")
        return False

def start_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ SelinaAI Multi-Channel API...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn", "app:app",
            "--host", "127.0.0.1", "--port", "8000", "--reload"
        ])
        
        print("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ SelinaAI Multi-Channel API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_env_file():
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    if not start_ngrok():
        print("‚ö†Ô∏è ngrok –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º ngrok URL
    ngrok_url = get_ngrok_url()
    if ngrok_url:
        update_env_with_ngrok(ngrok_url)
        print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π URL: {ngrok_url}")
    else:
        print("‚ö†Ô∏è ngrok URL –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    fastapi_process = start_fastapi()
    if not fastapi_process:
        return
    
    print("\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
    print(f"   üì± –õ–æ–∫–∞–ª—å–Ω—ã–π: http://127.0.0.1:8000")
    if ngrok_url:
        print(f"   üåê –ü—É–±–ª–∏—á–Ω—ã–π: {ngrok_url}")
    print(f"   üìö API Docs: http://127.0.0.1:8000/docs")
    print(f"   üåê WebApp: http://127.0.0.1:8000/webapp")
    
    print("\nüîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    print("   ‚Ä¢ Telegram WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("   ‚Ä¢ Email/Password –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("   ‚Ä¢ JWT —Ç–æ–∫–µ–Ω—ã –∏ —Å–µ—Å—Å–∏–∏")
    
    print("\nü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏:")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
    
    print("\nüì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:")
    print("   ‚Ä¢ Telegram (polling/webhook)")
    print("   ‚Ä¢ WhatsApp Business API")
    print("   ‚Ä¢ Instagram Direct Messages")
    
    print("\n‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        fastapi_process.wait()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FastAPI
        if fastapi_process:
            fastapi_process.terminate()
            fastapi_process.wait()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok
        try:
            subprocess.run(["pkill", "ngrok"], check=False)
            print("‚úÖ ngrok –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            pass
        
        print("üõë SelinaAI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
