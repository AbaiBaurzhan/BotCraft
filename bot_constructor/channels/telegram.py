"""
Telegram Channel Implementation
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram –±–æ—Ç–∞ —Å polling (dev) –∏ webhook (prod)
"""

import os
import asyncio
import logging
from typing import Dict, Any, Optional
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import TelegramError

from .base import BaseChannel, Message, Response, MessageType


class TelegramChannel(BaseChannel):
    """Telegram –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.bot = None
        self.app = None
        self.webhook_url = config.get("webhook_url", "")
        self.is_webhook_mode = config.get("webhook_mode", False)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_handlers = []
        self.command_handlers = []
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(f"telegram.{self.name}")
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Telegram –∫–∞–Ω–∞–ª–∞"""
        try:
            token = self.config.get("token")
            if not token:
                self.logger.error("Telegram token –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            self.bot = Bot(token=token)
            self.app = Application.builder().token(token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            if self.is_webhook_mode and self.webhook_url:
                # Webhook —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
                await self._setup_webhook()
            else:
                # Polling —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                await self._setup_polling()
            
            self.is_active = True
            self.logger.info(f"Telegram –∫–∞–Ω–∞–ª {self.name} –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞"""
        try:
            if self.app:
                await self.app.stop()
                await self.app.shutdown()
            
            if self.is_webhook_mode and self.webhook_url:
                await self.bot.delete_webhook()
            
            self.is_active = False
            self.logger.info(f"Telegram –∫–∞–Ω–∞–ª {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def send_message(self, response: Response) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.bot or not self.is_active:
                return False
            
            if response.message_type == MessageType.TEXT:
                await self.bot.send_message(
                    chat_id=response.chat_id,
                    text=response.content,
                    parse_mode='HTML'
                )
            elif response.message_type == MessageType.IMAGE:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å URL –∏–ª–∏ file_id)
                if response.metadata and "image_url" in response.metadata:
                    await self.bot.send_photo(
                        chat_id=response.chat_id,
                        photo=response.metadata["image_url"],
                        caption=response.content
                    )
            
            return True
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_message(self, message: Message) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return None
    
    async def get_webhook_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞"""
        return f"{self.webhook_url}/webhook/telegram"
    
    async def verify_webhook(self, data: Dict[str, Any]) -> bool:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ Telegram"""
        # Telegram –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è webhook
        return True
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        async def start_command(update: Update, context):
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Message(
                id=str(update.message.message_id),
                channel="telegram",
                user_id=str(user_id),
                chat_id=str(chat_id),
                message_type=MessageType.TEXT,
                content="/start",
                metadata={"username": update.effective_user.username},
                timestamp=update.message.date.timestamp()
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            response = await self._handle_message(message)
            if response:
                await self.send_message(response)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /panel
        async def panel_command(update: Update, context):
            chat_id = update.effective_chat.id
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
            webapp_url = self.config.get("webapp_url", "")
            if webapp_url:
                keyboard = [
                    [InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", 
                        web_app={"url": webapp_url}
                    )]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="üéØ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º",
                    reply_markup=reply_markup
                )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="üîó WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async def text_message(update: Update, context):
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            
            message = Message(
                id=str(update.message.message_id),
                channel="telegram",
                user_id=str(user_id),
                chat_id=str(chat_id),
                message_type=MessageType.TEXT,
                content=update.message.text,
                metadata={"username": update.effective_user.username},
                timestamp=update.message.date.timestamp()
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            response = await self._handle_message(message)
            if response:
                await self.send_message(response)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        async def image_message(update: Update, context):
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_id = photo.file_id
            
            message = Message(
                id=str(update.message.message_id),
                channel="telegram",
                user_id=str(user_id),
                chat_id=str(chat_id),
                message_type=MessageType.IMAGE,
                content="",  # –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                metadata={
                    "file_id": file_id,
                    "file_size": photo.file_size,
                    "width": photo.width,
                    "height": photo.height
                },
                timestamp=update.message.date.timestamp()
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            response = await self._handle_message(message)
            if response:
                await self.send_message(response)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", start_command))
        self.app.add_handler(CommandHandler("panel", panel_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message))
        self.app.add_handler(MessageHandler(filters.PHOTO, image_message))
    
    async def _handle_message(self, message: Message) -> Optional[Response]:
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ RAG –∏ AI
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        if message.content == "/start":
            return Response(
                chat_id=message.chat_id,
                content="ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BotCraft!\n\n"
                       "–Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /panel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
                       "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∑–∞–≥–ª—É—à–∫–∞
        return Response(
            chat_id=message.chat_id,
            content="üìù –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞."
        )
    
    async def _setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
        webhook_url = await self.get_webhook_url()
        await self.bot.set_webhook(url=webhook_url)
        self.logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    
    async def _setup_polling(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        self.logger.info("Polling —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω")
    
    def add_message_handler(self, handler):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_handlers.append(handler)
    
    def add_command_handler(self, handler):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥"""
        self.command_handlers.append(handler)
