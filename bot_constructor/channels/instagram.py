"""
Instagram DM Channel Implementation
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Instagram Direct Messages —á–µ—Ä–µ–∑ Meta Graph API
"""

import os
import json
import logging
from typing import Dict, Any, Optional
from datetime import datetime

from .base import BaseChannel, Message, Response, MessageType


class InstagramChannel(BaseChannel):
    """Instagram DM –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.access_token = config.get("access_token")
        self.instagram_business_account_id = config.get("instagram_business_account_id")
        self.page_id = config.get("page_id")
        self.verify_token = config.get("verify_token")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(f"instagram.{self.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not all([self.access_token, self.instagram_business_account_id, self.page_id]):
            self.logger.warning("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Instagram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.can_send_messages = False
        self.permissions_checked = False
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Instagram –∫–∞–Ω–∞–ª–∞"""
        try:
            if not all([self.access_token, self.instagram_business_account_id, self.page_id]):
                self.logger.error("Instagram –∫–∞–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            await self._check_permissions()
            
            if await self._test_api_connection():
                self.is_active = True
                self.logger.info(f"Instagram –∫–∞–Ω–∞–ª {self.name} –∑–∞–ø—É—â–µ–Ω")
                if self.can_send_messages:
                    self.logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    self.logger.warning("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏–µ–º)")
                return True
            else:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Instagram API")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Instagram –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Instagram –∫–∞–Ω–∞–ª–∞"""
        try:
            self.is_active = False
            self.logger.info(f"Instagram –∫–∞–Ω–∞–ª {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Instagram –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def send_message(self, response: Response) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Instagram DM"""
        try:
            if not self.is_active:
                return False
            
            if not self.can_send_messages:
                self.logger.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Instagram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                return True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message_data = {
                "recipient_type": "individual",
                "to": response.chat_id,
                "type": "text",
                "text": response.content
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Meta Graph API
            success = await self._send_instagram_message(message_data)
            
            if success:
                self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Instagram: {response.chat_id}")
                return True
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Instagram: {response.chat_id}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Instagram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_message(self, message: Message) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Instagram"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return None
    
    async def get_webhook_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞"""
        base_url = self.config.get("webhook_base_url", "")
        return f"{base_url}/webhook/instagram"
    
    async def verify_webhook(self, data: Dict[str, Any]) -> bool:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ Instagram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            mode = data.get("hub.mode")
            token = data.get("hub.verify_token")
            challenge = data.get("hub.challenge")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∏ —Ç–æ–∫–µ–Ω
            if mode == "subscribe" and token == self.verify_token:
                self.logger.info("Instagram webhook –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                self.logger.warning("Instagram webhook –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Instagram webhook: {e}")
            return False
    
    async def process_webhook_message(self, data: Dict[str, Any]) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ webhook"""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook Instagram
            if "object" not in data or data["object"] != "instagram":
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            entries = data.get("entry", [])
            for entry in entries:
                changes = entry.get("changes", [])
                for change in changes:
                    if change.get("value", {}).get("messages"):
                        messages = change["value"]["messages"]
                        for msg in messages:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            response = await self._process_instagram_message(msg)
                            if response:
                                return response
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Instagram webhook: {e}")
            return None
    
    async def _process_instagram_message(self, msg_data: Dict[str, Any]) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Instagram —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = msg_data.get("id")
            from_user = msg_data.get("from", {})
            timestamp = msg_data.get("timestamp")
            message_type = msg_data.get("type")
            
            if not all([message_id, from_user, timestamp]):
                return None
            
            user_id = from_user.get("id")
            username = from_user.get("username", "unknown")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_type == "text":
                content = msg_data.get("text", "")
                msg_type = MessageType.TEXT
            elif message_type == "image":
                content = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                msg_type = MessageType.IMAGE
            elif message_type == "story_mention":
                content = "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏"
                msg_type = MessageType.TEXT
            else:
                content = f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message_type}"
                msg_type = MessageType.TEXT
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Message(
                id=message_id,
                channel="instagram",
                user_id=str(user_id),
                chat_id=str(user_id),
                message_type=msg_type,
                content=content,
                metadata={
                    "instagram_type": message_type,
                    "username": username,
                    "raw_data": msg_data
                },
                timestamp=float(timestamp)
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await self._handle_message(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Instagram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _handle_message(self, message: Message) -> Optional[Response]:
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Instagram —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ RAG –∏ AI
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        return Response(
            chat_id=message.chat_id,
            content="üì∏ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ Instagram —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞."
        )
    
    async def _check_permissions(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.permissions_checked:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Graph API
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ /me/permissions
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            required_permissions = [
                "instagram_basic",
                "instagram_manage_comments",
                "pages_messaging"
            ]
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
            # –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å
            self.can_send_messages = True
            self.permissions_checked = True
            
            self.logger.info("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è Instagram –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Instagram: {e}")
            self.can_send_messages = False
            self.permissions_checked = True
    
    async def _test_api_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram API"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Graph API
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram API: {e}")
            return False
    
    async def _send_instagram_message(self, message_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Instagram Graph API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Meta Graph API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ Instagram —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Instagram API: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Instagram –∫–∞–Ω–∞–ª–∞"""
        base_status = super().get_status()
        base_status.update({
            "can_send_messages": self.can_send_messages,
            "permissions_checked": self.permissions_checked,
            "instagram_account_id": self.instagram_business_account_id,
            "page_id": self.page_id
        })
        return base_status
    
    async def prepare_message_for_sending(self, response: Response) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞)"""
        """
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É. –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ:
        - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            if not self.can_send_messages:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.chat_id}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                return {
                    "status": "prepared",
                    "message": response,
                    "channel": "instagram",
                    "timestamp": datetime.now().isoformat(),
                    "requires_permission": True
                }
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                success = await self.send_message(response)
                return {
                    "status": "sent" if success else "failed",
                    "message": response,
                    "channel": "instagram",
                    "timestamp": datetime.now().isoformat(),
                    "requires_permission": False
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Instagram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "status": "error",
                "error": str(e),
                "message": response,
                "channel": "instagram",
                "timestamp": datetime.now().isoformat()
            }
