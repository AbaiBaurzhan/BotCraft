"""
WhatsApp Business Channel Implementation
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ WhatsApp Business —á–µ—Ä–µ–∑ Meta Cloud API
"""

import os
import json
import hmac
import hashlib
import logging
from typing import Dict, Any, Optional
from datetime import datetime

from .base import BaseChannel, Message, Response, MessageType


class WhatsAppChannel(BaseChannel):
    """WhatsApp Business –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.access_token = config.get("access_token")
        self.phone_number_id = config.get("phone_number_id")
        self.verify_token = config.get("verify_token")
        self.app_secret = config.get("app_secret")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(f"whatsapp.{self.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not all([self.access_token, self.phone_number_id, self.verify_token]):
            self.logger.warning("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã WhatsApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ WhatsApp –∫–∞–Ω–∞–ª–∞"""
        try:
            if not all([self.access_token, self.phone_number_id, self.verify_token]):
                self.logger.error("WhatsApp –∫–∞–Ω–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if await self._test_api_connection():
                self.is_active = True
                self.logger.info(f"WhatsApp –∫–∞–Ω–∞–ª {self.name} –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WhatsApp API")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WhatsApp –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WhatsApp –∫–∞–Ω–∞–ª–∞"""
        try:
            self.is_active = False
            self.logger.info(f"WhatsApp –∫–∞–Ω–∞–ª {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ WhatsApp –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def send_message(self, response: Response) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp"""
        try:
            if not self.is_active:
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message_data = {
                "messaging_product": "whatsapp",
                "to": response.chat_id,
                "type": "text",
                "text": {"body": response.content}
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Meta API
            success = await self._send_whatsapp_message(message_data)
            
            if success:
                self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp: {response.chat_id}")
                return True
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp: {response.chat_id}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def process_message(self, message: Message) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ WhatsApp"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return None
    
    async def get_webhook_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞"""
        base_url = self.config.get("webhook_base_url", "")
        return f"{base_url}/webhook/whatsapp"
    
    async def verify_webhook(self, data: Dict[str, Any]) -> bool:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ WhatsApp"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            mode = data.get("hub.mode")
            token = data.get("hub.verify_token")
            challenge = data.get("hub.challenge")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –∏ —Ç–æ–∫–µ–Ω
            if mode == "subscribe" and token == self.verify_token:
                self.logger.info("WhatsApp webhook –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                self.logger.warning("WhatsApp webhook –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WhatsApp webhook: {e}")
            return False
    
    async def process_webhook_message(self, data: Dict[str, Any]) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ webhook"""
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook
            if "object" not in data or data["object"] != "whatsapp_business_account":
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            entries = data.get("entry", [])
            for entry in entries:
                changes = entry.get("changes", [])
                for change in changes:
                    if change.get("value", {}).get("messages"):
                        messages = change["value"]["messages"]
                        for msg in messages:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            response = await self._process_whatsapp_message(msg)
                            if response:
                                return response
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WhatsApp webhook: {e}")
            return None
    
    async def _process_whatsapp_message(self, msg_data: Dict[str, Any]) -> Optional[Response]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = msg_data.get("id")
            from_number = msg_data.get("from")
            timestamp = msg_data.get("timestamp")
            message_type = msg_data.get("type")
            
            if not all([message_id, from_number, timestamp]):
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message_type == "text":
                content = msg_data.get("text", {}).get("body", "")
                msg_type = MessageType.TEXT
            elif message_type == "image":
                content = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                msg_type = MessageType.IMAGE
            elif message_type == "document":
                content = "–î–æ–∫—É–º–µ–Ω—Ç"
                msg_type = MessageType.DOCUMENT
            else:
                content = f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message_type}"
                msg_type = MessageType.TEXT
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Message(
                id=message_id,
                channel="whatsapp",
                user_id=from_number,
                chat_id=from_number,
                message_type=msg_type,
                content=content,
                metadata={
                    "whatsapp_type": message_type,
                    "raw_data": msg_data
                },
                timestamp=float(timestamp)
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await self._handle_message(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _handle_message(self, message: Message) -> Optional[Response]:
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ RAG –∏ AI
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        return Response(
            chat_id=message.chat_id,
            content="üì± –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞."
        )
    
    async def _test_api_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhatsApp API"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WhatsApp API: {e}")
            return False
    
    async def _send_whatsapp_message(self, message_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Meta API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WhatsApp API: {e}")
            return False
    
    def verify_signature(self, body: str, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.app_secret:
                self.logger.warning("App secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
                return True
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
            expected_signature = "sha256=" + hmac.new(
                self.app_secret.encode('utf-8'),
                body.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(signature, expected_signature)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            return False
